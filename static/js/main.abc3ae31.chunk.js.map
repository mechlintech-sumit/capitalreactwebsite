{"version":3,"sources":["GraphQL/Queries.js","Component/SearchAutocomplete.js","App.js","reportWebVitals.js","index.js"],"names":["LOAD_COUNTRY","gql","SearchAutocomplete","useState","code","setCode","useQuery","variables","Code","loading","error","data","myOptions","setMyOptions","name","search","setSerarch","console","log","className","style","marginLeft","marginTop","Autocomplete","width","freeSolo","autoComplete","autoHighlight","options","Data","onChange","event","values","getOptionLabel","option","renderInput","params","TextField","value","defaultValue","target","length","getData","variant","label","country","undefined","capital","currency","languages","map","lan","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errorLink","onError","graphqlErrors","networkError","message","location","path","alert","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.abc3ae31.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const LOAD_COUNTRY = gql`\n  query ($Code: ID!) {\n    country(code: $Code) {\n      name\n      native\n      capital\n      emoji\n      currency\n      languages {\n        code\n        name\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Data from \"../Data.json\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { LOAD_COUNTRY } from \"../GraphQL/Queries\";\r\nimport \"../App.css\";\r\n\r\nconst SearchAutocomplete = () => {\r\n  const [code, setCode] = useState(\"\");\r\n  const { error, loading, data } = useQuery(LOAD_COUNTRY, {\r\n    variables: { Code: code },\r\n  });\r\n  const [myOptions, setMyOptions] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [search, setSerarch] = useState(\"\");\r\n\r\n  //  if (loading) return <h2>Lodaing</h2>;\r\n  //   if (error) return `Error! ${error}`\r\n\r\n  console.log(\"code\", code, search);\r\n  console.log(\"useQuery\", data);\r\n\r\n  const getData = (event, value) => {\r\n    console.log(value);\r\n    if (event.target.value.length >= 3) {\r\n      setSerarch(event.target.value.length);\r\n      setMyOptions(myOptions);\r\n    }\r\n  };\r\n\r\n  const onTagsChange = (event, values) => {\r\n    if (values) {\r\n      setCode(values.code);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1 className=\"heading\"> Country Name</h1>\r\n        <div style={{ marginLeft: \"23%\", marginTop: \"60px\" }}>\r\n          <Autocomplete\r\n            style={{ width: 500 }}\r\n            freeSolo\r\n            autoComplete\r\n            autoHighlight\r\n            options={search >= 3 ? Data : []}\r\n            onChange={onTagsChange}\r\n            getOptionLabel={(option) => option.name}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                value={name}\r\n                defaultValue=\"The Godfather\"\r\n                onChange={(event) => getData(event)}\r\n                variant=\"outlined\"\r\n                label=\"Search Box\"\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n        <div style={{marginLeft:\"20%\",marginTop:\"30px\"}}>\r\n          {loading ? <h1>Loading ...</h1> : <> {\r\n            data.country != null ? <>\r\n           \r\n              <div className=\"output\">\r\n                <h2>Country </h2>\r\n                <span className=\"result\"></span>\r\n                <h2 style={{ marginLeft: \"10px\" }}>\r\n                  {data == undefined ? null : data.country.name}{\" \"}\r\n                </h2>\r\n                <span></span>\r\n              </div>\r\n              <div className=\"output\">\r\n                <h2>Capital </h2>\r\n                <span className=\"result\"></span>\r\n                <h2 style={{ marginLeft: \"10px\" }}>\r\n                  {data == undefined ? null : data.country.capital}{\" \"}\r\n                </h2>\r\n                <span></span>\r\n              </div>\r\n              <div className=\"output\">\r\n                <h2>Currency </h2>\r\n                <span className=\"result\"></span>\r\n                <h2 style={{ marginLeft: \"10px\" }}>\r\n                  {data == undefined ? null : data.country.currency}{\" \"}\r\n                </h2>\r\n                <span></span>\r\n              </div>\r\n              <div className=\"output\">\r\n                <h2>List of Languages </h2>\r\n                <span className=\"result\"></span>\r\n                <h2 style={{ marginLeft: \"10px\" }}>\r\n                  {data == undefined\r\n                    ? null\r\n                    : data.country.languages.map((lan) => {\r\n                      return <h5>{lan.name}</h5>;\r\n                    })}{\" \"}\r\n                </h2>\r\n                <span></span>\r\n              </div></> : null\r\n          }\r\n          \r\n          </>\r\n        }\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchAutocomplete;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport SearchAutocomplete from \"./Component/SearchAutocomplete\";\n\nfunction App() {\n  return (\n    <div className=\"page\">\n      <div className=\"tel-box\">\n        <SearchAutocomplete />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\n\nconst errorLink = onError(({ graphqlErrors, networkError }) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({ message, location, path }) => {\n      alert(`Graphql error ${message}`);\n    });\n  }\n});\n \nconst link = from([\n  errorLink,\n  new HttpLink({ uri: \"https://countries.trevorblades.com/\" }),\n]);\n \nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n  <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}